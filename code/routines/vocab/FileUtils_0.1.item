package routines;

import java.io.File;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class FileUtils {

	private static final int TEMP_DIR_ATTEMPTS = 10000;
	
    /**
     * createTempDir: create a temporary directory and return itslocation (will be deleted at the end of the job)
     * 
     * {talendTypes} File
     * 
     * {Category} FileUtils
     * 
     * {example} createTempDir() # creates a temporary directory and returns its location
     */
	public static String createTempDir() {
	  File baseDir = new File(System.getProperty("java.io.tmpdir"));
	  String baseName = System.currentTimeMillis() + "-";

	  for (int counter = 0; counter < TEMP_DIR_ATTEMPTS; counter++) {
	    final File tempDir = new File(baseDir, baseName + counter);
	    if (tempDir.mkdir()) {
	    	deleteOnExit(tempDir);
	      return tempDir.getAbsolutePath();
	    }
	  }
	  throw new IllegalStateException("Failed to create directory within "
	      + TEMP_DIR_ATTEMPTS + " attempts (tried "
	      + baseName + "0 to " + baseName + (TEMP_DIR_ATTEMPTS - 1) + ')');
	}

    /**
     * sanitise: remove special characters from name (used to ensure filename is something GeoNetwork
     * can import)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} FileUtils
     * 
     * {param} name("AODN Parameter Register") input: The name to be sanitised.
     * 
     * {example} sanitise("AODN Parameter Register") # returns "AODNParameterRegister"
     */
	public static String sanitise(String name) {
		StringBuilder sanitisedName = new StringBuilder();

		for (char c : name.toCharArray()) {
		  if (c=='.' || Character.isJavaIdentifierPart(c)) {
		    sanitisedName.append(c);
		  }
		}
		
		return sanitisedName.toString();
	}

	private static void deleteOnExit(final File tempDir) {
		Runtime.getRuntime().addShutdownHook(new Thread() {
		      public void run() {
		       removeDirectory(tempDir);
		      }
		 });
	}
	
	private static void removeDirectory(File dir) {
	    if (dir.isDirectory()) {
	        File[] files = dir.listFiles();
	        if (files != null && files.length > 0) {
	            for (File aFile : files) {
	                removeDirectory(aFile);
	            }
	        }
	        dir.delete();
	    } else {
	        dir.delete();
	    }
	}

}