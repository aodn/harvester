// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.3.r96646)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package anfog_dm.deletemetadata_rt_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.GeometryUtility;
import routines.Numeric;
import routines.NetCDFUtils;
import routines.GeoOperation;
import routines.DAPUtils;
import routines.Mathematical;
import routines.ArgoUtils;
import routines.Relational;
import routines.TalendDate;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: DeleteMetadata_RT Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.3.r96646
 * @status 
 */
public class DeleteMetadata_RT implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (logDir != null) {

				this.setProperty("logDir", logDir.toString());

			}

			if (paramFile != null) {

				this.setProperty("paramFile", paramFile.toString());

			}

			if (metadataDb_RT_Database != null) {

				this.setProperty("metadataDb_RT_Database",
						metadataDb_RT_Database.toString());

			}

			if (metadataDb_RT_Login != null) {

				this.setProperty("metadataDb_RT_Login", metadataDb_RT_Login
						.toString());

			}

			if (metadataDb_RT_Password != null) {

				this.setProperty("metadataDb_RT_Password",
						metadataDb_RT_Password.toString());

			}

			if (metadataDb_RT_Port != null) {

				this.setProperty("metadataDb_RT_Port", metadataDb_RT_Port
						.toString());

			}

			if (metadataDb_RT_Schema != null) {

				this.setProperty("metadataDb_RT_Schema", metadataDb_RT_Schema
						.toString());

			}

			if (metadataDb_RT_Server != null) {

				this.setProperty("metadataDb_RT_Server", metadataDb_RT_Server
						.toString());

			}

			if (exclude != null) {

				this.setProperty("exclude", exclude.toString());

			}

			if (fileId != null) {

				this.setProperty("fileId", fileId.toString());

			}

			if (include != null) {

				this.setProperty("include", include.toString());

			}

			if (sourceDir != null) {

				this.setProperty("sourceDir", sourceDir.toString());

			}

			if (url != null) {

				this.setProperty("url", url.toString());

			}

		}

		public String logDir;

		public String getLogDir() {
			return this.logDir;
		}

		public String paramFile;

		public String getParamFile() {
			return this.paramFile;
		}

		public String metadataDb_RT_Database;

		public String getMetadataDb_RT_Database() {
			return this.metadataDb_RT_Database;
		}

		public String metadataDb_RT_Login;

		public String getMetadataDb_RT_Login() {
			return this.metadataDb_RT_Login;
		}

		public java.lang.String metadataDb_RT_Password;

		public java.lang.String getMetadataDb_RT_Password() {
			return this.metadataDb_RT_Password;
		}

		public String metadataDb_RT_Port;

		public String getMetadataDb_RT_Port() {
			return this.metadataDb_RT_Port;
		}

		public String metadataDb_RT_Schema;

		public String getMetadataDb_RT_Schema() {
			return this.metadataDb_RT_Schema;
		}

		public String metadataDb_RT_Server;

		public String getMetadataDb_RT_Server() {
			return this.metadataDb_RT_Server;
		}

		public String exclude;

		public String getExclude() {
			return this.exclude;
		}

		public Long fileId;

		public Long getFileId() {
			return this.fileId;
		}

		public String include;

		public String getInclude() {
			return this.include;
		}

		public String sourceDir;

		public String getSourceDir() {
			return this.sourceDir;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "DeleteMetadata_RT";
	private final String projectName = "ANFOG_DM";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_EspM8HmWEeO3Y9k88sZyxQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					DeleteMetadata_RT.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(DeleteMetadata_RT.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			} else {

				status = "failure";

			}
		}
	}

	public void Implicit_Context_Delimited_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("Implicit_Context_Delimited", System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Delimited_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void Implicit_Context_Context_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Delimited_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_FILE_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendStats_STATS", System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_FILE_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendStats_FILE", System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void Implicit_Context_Delimited_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class row_Implicit_Context_DelimitedStruct
			implements
			routines.system.IPersistableRow<row_Implicit_Context_DelimitedStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DeleteMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DeleteMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DeleteMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DeleteMetadata_RT, 0,
						length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_DeleteMetadata_RT, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DeleteMetadata_RT) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_Implicit_Context_DelimitedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void Implicit_Context_DelimitedProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("Implicit_Context_Delimited_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_Implicit_Context_DelimitedStruct row_Implicit_Context_Delimited = new row_Implicit_Context_DelimitedStruct();

				/**
				 * [Implicit_Context_Context begin ] start
				 */

				ok_Hash.put("Implicit_Context_Context", false);
				start_Hash.put("Implicit_Context_Context", System
						.currentTimeMillis());
				currentComponent = "Implicit_Context_Context";

				int tos_count_Implicit_Context_Context = 0;
				java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				int nb_line_Implicit_Context_Context = 0;

				/**
				 * [Implicit_Context_Context begin ] stop
				 */

				/**
				 * [Implicit_Context_Delimited begin ] start
				 */

				ok_Hash.put("Implicit_Context_Delimited", false);
				start_Hash.put("Implicit_Context_Delimited", System
						.currentTimeMillis());
				currentComponent = "Implicit_Context_Delimited";

				int tos_count_Implicit_Context_Delimited = 0;

				class RowHelper_Implicit_Context_Delimited {

					public void valueToConn(
							org.talend.fileprocess.FileInputDelimited fid,
							row_Implicit_Context_DelimitedStruct row_Implicit_Context_Delimited)
							throws java.lang.Exception {

						row_Implicit_Context_Delimited.key = fid.get(0);

						row_Implicit_Context_Delimited.value = fid.get(1);

					}

				}
				RowHelper_Implicit_Context_Delimited rowHelper_Implicit_Context_Delimited = new RowHelper_Implicit_Context_Delimited();

				int nb_line_Implicit_Context_Delimited = 0;
				org.talend.fileprocess.FileInputDelimited fid_Implicit_Context_Delimited = null;
				try {

					Object filename_Implicit_Context_Delimited = context.paramFile;
					if (filename_Implicit_Context_Delimited instanceof java.io.InputStream) {

						int footer_value_Implicit_Context_Delimited = 0, random_value_Implicit_Context_Delimited = -1;
						if (footer_value_Implicit_Context_Delimited > 0
								|| random_value_Implicit_Context_Delimited > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_Implicit_Context_Delimited = new org.talend.fileprocess.FileInputDelimited(
								context.paramFile, "ISO-8859-15", "=>", "\n",
								true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_Implicit_Context_Delimited != null
							&& fid_Implicit_Context_Delimited.nextRecord()) {

						row_Implicit_Context_Delimited = null;

						boolean whetherReject_Implicit_Context_Delimited = false;
						row_Implicit_Context_Delimited = new row_Implicit_Context_DelimitedStruct();
						try {

							rowHelper_Implicit_Context_Delimited.valueToConn(
									fid_Implicit_Context_Delimited,
									row_Implicit_Context_Delimited);

						} catch (java.lang.Exception e) {
							whetherReject_Implicit_Context_Delimited = true;

							System.err.println(e.getMessage());
							row_Implicit_Context_Delimited = null;

						}

						/**
						 * [Implicit_Context_Delimited begin ] stop
						 */
						/**
						 * [Implicit_Context_Delimited main ] start
						 */

						currentComponent = "Implicit_Context_Delimited";

						tos_count_Implicit_Context_Delimited++;

						/**
						 * [Implicit_Context_Delimited main ] stop
						 */
						// Start of branch "row_Implicit_Context_Delimited"
						if (row_Implicit_Context_Delimited != null) {

							/**
							 * [Implicit_Context_Context main ] start
							 */

							currentComponent = "Implicit_Context_Context";

							// ////////////////////////
							String tmp_key_Implicit_Context_Context = null;

							String key_Implicit_Context_Context = null;
							if (row_Implicit_Context_Delimited.key != null) {
								tmp_key_Implicit_Context_Context = row_Implicit_Context_Delimited.key
										.trim();
								if ((tmp_key_Implicit_Context_Context
										.startsWith("#") || tmp_key_Implicit_Context_Context
										.startsWith("!"))) {
									tmp_key_Implicit_Context_Context = null;
								} else {
									row_Implicit_Context_Delimited.key = tmp_key_Implicit_Context_Context;
								}
							}
							if (row_Implicit_Context_Delimited.key != null) {

								key_Implicit_Context_Context =

								row_Implicit_Context_Delimited.key;

							}

							String value_Implicit_Context_Context = null;
							if (row_Implicit_Context_Delimited.value != null) {

								value_Implicit_Context_Context =

								row_Implicit_Context_Delimited.value;

							}

							if (tmp_key_Implicit_Context_Context != null) {
								try {
									if (key_Implicit_Context_Context != null
											&& "logDir"
													.equals(key_Implicit_Context_Context)) {
										context.logDir = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "paramFile"
													.equals(key_Implicit_Context_Context)) {
										context.paramFile = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "metadataDb_RT_Database"
													.equals(key_Implicit_Context_Context)) {
										context.metadataDb_RT_Database = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "metadataDb_RT_Login"
													.equals(key_Implicit_Context_Context)) {
										context.metadataDb_RT_Login = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "metadataDb_RT_Password"
													.equals(key_Implicit_Context_Context)) {
										context.metadataDb_RT_Password = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "metadataDb_RT_Port"
													.equals(key_Implicit_Context_Context)) {
										context.metadataDb_RT_Port = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "metadataDb_RT_Schema"
													.equals(key_Implicit_Context_Context)) {
										context.metadataDb_RT_Schema = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "metadataDb_RT_Server"
													.equals(key_Implicit_Context_Context)) {
										context.metadataDb_RT_Server = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "exclude"
													.equals(key_Implicit_Context_Context)) {
										context.exclude = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "fileId"
													.equals(key_Implicit_Context_Context)) {

										context.fileId = Long
												.parseLong(value_Implicit_Context_Context);

									}

									if (key_Implicit_Context_Context != null
											&& "include"
													.equals(key_Implicit_Context_Context)) {
										context.include = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "sourceDir"
													.equals(key_Implicit_Context_Context)) {
										context.sourceDir = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "url".equals(key_Implicit_Context_Context)) {
										context.url = value_Implicit_Context_Context;
									}

									if (context
											.getProperty(key_Implicit_Context_Context) != null) {
										assignList_Implicit_Context_Context
												.add(key_Implicit_Context_Context);
									} else {
										newPropertyList_Implicit_Context_Context
												.add(key_Implicit_Context_Context);
									}
									context.setProperty(
											key_Implicit_Context_Context,
											value_Implicit_Context_Context);
								} catch (java.lang.Exception e) {
									System.err.println("Set value for key: "
											+ key_Implicit_Context_Context
											+ " failed, error message: "
											+ e.getMessage());
								}
								nb_line_Implicit_Context_Context++;
							}
							// ////////////////////////

							tos_count_Implicit_Context_Context++;

							/**
							 * [Implicit_Context_Context main ] stop
							 */

						} // End of branch "row_Implicit_Context_Delimited"

						/**
						 * [Implicit_Context_Delimited end ] start
						 */

						currentComponent = "Implicit_Context_Delimited";

					}
				} finally {
					if (!((Object) (context.paramFile) instanceof java.io.InputStream)) {
						if (fid_Implicit_Context_Delimited != null) {
							fid_Implicit_Context_Delimited.close();
						}
					}
					if (fid_Implicit_Context_Delimited != null) {
						globalMap.put("Implicit_Context_Delimited_NB_LINE",
								fid_Implicit_Context_Delimited.getRowNumber());
					}
				}

				ok_Hash.put("Implicit_Context_Delimited", true);
				end_Hash.put("Implicit_Context_Delimited", System
						.currentTimeMillis());

				/**
				 * [Implicit_Context_Delimited end ] stop
				 */

				/**
				 * [Implicit_Context_Context end ] start
				 */

				currentComponent = "Implicit_Context_Context";

				java.util.Enumeration<?> enu_Implicit_Context_Context = context
						.propertyNames();
				while (enu_Implicit_Context_Context.hasMoreElements()) {
					String key_Implicit_Context_Context = (String) enu_Implicit_Context_Context
							.nextElement();
					if (!assignList_Implicit_Context_Context
							.contains(key_Implicit_Context_Context)
							&& !newPropertyList_Implicit_Context_Context
									.contains(key_Implicit_Context_Context)) {
						noAssignList_Implicit_Context_Context
								.add(key_Implicit_Context_Context);
					}
				}

				String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context
						.toString();
				String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context
						.substring(1, newPropertyStr_Implicit_Context_Context
								.length() - 1);

				String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context
						.toString();
				String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context
						.substring(1, noAssignStr_Implicit_Context_Context
								.length() - 1);

				globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT",
						newProperty_Implicit_Context_Context);
				globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED",
						noAssign_Implicit_Context_Context);

				globalMap.put("Implicit_Context_Context_NB_LINE",
						nb_line_Implicit_Context_Context);

				resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "",
						Thread.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context));

				ok_Hash.put("Implicit_Context_Context", true);
				end_Hash.put("Implicit_Context_Context", System
						.currentTimeMillis());

				/**
				 * [Implicit_Context_Context end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("Implicit_Context_Delimited_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.metadataDb_Server + ":"
						+ context.metadataDb_Port + "/"
						+ context.metadataDb_Database;

				String userName_tPostgresqlConnection_1 = context.metadataDb_Login;

				String password_tPostgresqlConnection_1 = context.metadataDb_Password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								userName_tPostgresqlConnection_1,
								password_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1.setAutoCommit(false);

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.metadataDb_Schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_1", false);
				start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlRow_1";

				int tos_count_tPostgresqlRow_1 = 0;

				java.sql.Connection conn_tPostgresqlRow_1 = null;
				conn_tPostgresqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1
						.createStatement();
				String query_tPostgresqlRow_1 = "";
				boolean whetherReject_tPostgresqlRow_1 = false;

				/**
				 * [tPostgresqlRow_1 begin ] stop
				 */
				/**
				 * [tPostgresqlRow_1 main ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				query_tPostgresqlRow_1 = "delete from attribute where file_id = '"
						+ context.fileId + "'";
				whetherReject_tPostgresqlRow_1 = false;

				globalMap.put("tPostgresqlRow_1_QUERY", query_tPostgresqlRow_1);
				try {
					stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_1 = true;
					throw (e);
				}
				if (!whetherReject_tPostgresqlRow_1) {
				}

				tos_count_tPostgresqlRow_1++;

				/**
				 * [tPostgresqlRow_1 main ] stop
				 */
				/**
				 * [tPostgresqlRow_1 end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				stmt_tPostgresqlRow_1.close();

				ok_Hash.put("tPostgresqlRow_1", true);
				end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_2", false);
				start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlRow_2";

				int tos_count_tPostgresqlRow_2 = 0;

				java.sql.Connection conn_tPostgresqlRow_2 = null;
				conn_tPostgresqlRow_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2
						.createStatement();
				String query_tPostgresqlRow_2 = "";
				boolean whetherReject_tPostgresqlRow_2 = false;

				/**
				 * [tPostgresqlRow_2 begin ] stop
				 */
				/**
				 * [tPostgresqlRow_2 main ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				query_tPostgresqlRow_2 = "delete from variable where file_id = '"
						+ context.fileId + "'";
				whetherReject_tPostgresqlRow_2 = false;

				globalMap.put("tPostgresqlRow_2_QUERY", query_tPostgresqlRow_2);
				try {
					stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_2 = true;
					throw (e);
				}
				if (!whetherReject_tPostgresqlRow_2) {
				}

				tos_count_tPostgresqlRow_2++;

				/**
				 * [tPostgresqlRow_2 main ] stop
				 */
				/**
				 * [tPostgresqlRow_2 end ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				stmt_tPostgresqlRow_2.close();

				ok_Hash.put("tPostgresqlRow_2", true);
				end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlRow_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					conn_tPostgresqlCommit_1.commit();
					conn_tPostgresqlCommit_1.close();
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DeleteMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DeleteMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DeleteMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DeleteMetadata_RT, 0,
						length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_DeleteMetadata_RT, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DeleteMetadata_RT) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
				currentComponent = "talendLogs_FILE";

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File(context.logDir
						+ "/" + "logs_file.txt")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE
							.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE
							.substring(0, fileName_talendLogs_FILE
									.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(
						fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}

				int nb_line_talendLogs_FILE = 0;
				int splitEvery_talendLogs_FILE = 1000;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null
						&& directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(
							directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;
				try {
					outtalendLogs_FILE = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_talendLogs_FILE, true),
									"ISO-8859-15"));

					/**
					 * [talendLogs_FILE begin ] stop
					 */

					/**
					 * [talendLogs_LOGS begin ] start
					 */

					ok_Hash.put("talendLogs_LOGS", false);
					start_Hash.put("talendLogs_LOGS", System
							.currentTimeMillis());
					currentComponent = "talendLogs_LOGS";

					int tos_count_talendLogs_LOGS = 0;

					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */
						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_FILE main ] start
						 */

						currentComponent = "talendLogs_FILE";

						StringBuilder sb_talendLogs_FILE = new StringBuilder();

						if (row_talendLogs_LOGS.moment != null) {

							sb_talendLogs_FILE.append(

							FormatterUtils.format_Date(
									row_talendLogs_LOGS.moment,
									"yyyy-MM-dd HH:mm:ss")

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.pid != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.pid

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.root_pid != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.root_pid

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.father_pid != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.father_pid

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.project != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.project

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.job != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.job

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.context != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.context

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.priority != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.priority

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.type != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.type

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.origin != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.origin

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.message != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.message

							);

						}

						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);

						if (row_talendLogs_LOGS.code != null) {

							sb_talendLogs_FILE.append(

							row_talendLogs_LOGS.code

							);

						}

						sb_talendLogs_FILE
								.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

						nb_line_talendLogs_FILE++;

						outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

						tos_count_talendLogs_FILE++;

						/**
						 * [talendLogs_FILE main ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentComponent = "talendLogs_LOGS";

					}

					ok_Hash.put("talendLogs_LOGS", true);
					end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

					/**
					 * [talendLogs_LOGS end ] stop
					 */

					/**
					 * [talendLogs_FILE end ] start
					 */

					currentComponent = "talendLogs_FILE";

				} finally {
					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
					globalMap.put("talendLogs_FILE_NB_LINE",
							nb_line_talendLogs_FILE);
					globalMap.put("talendLogs_FILE_FILE_NAME",
							fileName_talendLogs_FILE);
				} // finally

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DeleteMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DeleteMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DeleteMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DeleteMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DeleteMetadata_RT, 0,
						length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_DeleteMetadata_RT, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DeleteMetadata_RT) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_FILE begin ] start
				 */

				ok_Hash.put("talendStats_FILE", false);
				start_Hash.put("talendStats_FILE", System.currentTimeMillis());
				currentComponent = "talendStats_FILE";

				int tos_count_talendStats_FILE = 0;

				String fileName_talendStats_FILE = "";
				fileName_talendStats_FILE = (new java.io.File(context.logDir
						+ "/" + "stats_file.txt")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_talendStats_FILE = null;
				String extension_talendStats_FILE = null;
				String directory_talendStats_FILE = null;
				if ((fileName_talendStats_FILE.indexOf("/") != -1)) {
					if (fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE
							.lastIndexOf("/")) {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					}
					directory_talendStats_FILE = fileName_talendStats_FILE
							.substring(0, fileName_talendStats_FILE
									.lastIndexOf("/"));
				} else {
					if (fileName_talendStats_FILE.lastIndexOf(".") != -1) {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					}
					directory_talendStats_FILE = "";
				}
				boolean isFileGenerated_talendStats_FILE = true;
				java.io.File filetalendStats_FILE = new java.io.File(
						fileName_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",
						fileName_talendStats_FILE);
				if (filetalendStats_FILE.exists()) {
					isFileGenerated_talendStats_FILE = false;
				}

				int nb_line_talendStats_FILE = 0;
				int splitEvery_talendStats_FILE = 1000;
				int splitedFileNo_talendStats_FILE = 0;
				int currentRow_talendStats_FILE = 0;

				final String OUT_DELIM_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendStats_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendStats_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendStats_FILE != null
						&& directory_talendStats_FILE.trim().length() != 0) {
					java.io.File dir_talendStats_FILE = new java.io.File(
							directory_talendStats_FILE);
					if (!dir_talendStats_FILE.exists()) {
						dir_talendStats_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendStats_FILE = null;
				try {
					outtalendStats_FILE = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_talendStats_FILE, true),
									"ISO-8859-15"));

					/**
					 * [talendStats_FILE begin ] stop
					 */

					/**
					 * [talendStats_STATS begin ] start
					 */

					ok_Hash.put("talendStats_STATS", false);
					start_Hash.put("talendStats_STATS", System
							.currentTimeMillis());
					currentComponent = "talendStats_STATS";

					int tos_count_talendStats_STATS = 0;

					for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
							.getMessages()) {
						row_talendStats_STATS.pid = pid;
						row_talendStats_STATS.root_pid = rootPid;
						row_talendStats_STATS.father_pid = fatherPid;
						row_talendStats_STATS.project = projectName;
						row_talendStats_STATS.job = jobName;
						row_talendStats_STATS.context = contextStr;
						row_talendStats_STATS.origin = (scm.getOrigin() == null
								|| scm.getOrigin().length() < 1 ? null : scm
								.getOrigin());
						row_talendStats_STATS.message = scm.getMessage();
						row_talendStats_STATS.duration = scm.getDuration();
						row_talendStats_STATS.moment = scm.getMoment();
						row_talendStats_STATS.message_type = scm
								.getMessageType();
						row_talendStats_STATS.job_version = scm.getJobVersion();
						row_talendStats_STATS.job_repository_id = scm
								.getJobId();
						row_talendStats_STATS.system_pid = scm.getSystemPid();

						/**
						 * [talendStats_STATS begin ] stop
						 */
						/**
						 * [talendStats_STATS main ] start
						 */

						currentComponent = "talendStats_STATS";

						tos_count_talendStats_STATS++;

						/**
						 * [talendStats_STATS main ] stop
						 */

						/**
						 * [talendStats_FILE main ] start
						 */

						currentComponent = "talendStats_FILE";

						StringBuilder sb_talendStats_FILE = new StringBuilder();

						if (row_talendStats_STATS.moment != null) {

							sb_talendStats_FILE.append(

							FormatterUtils.format_Date(
									row_talendStats_STATS.moment,
									"yyyy-MM-dd HH:mm:ss")

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.pid != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.pid

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.father_pid != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.father_pid

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.root_pid != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.root_pid

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.system_pid != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.system_pid

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.project != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.project

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.job != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.job

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.job_repository_id != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.job_repository_id

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.job_version != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.job_version

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.context != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.context

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.origin != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.origin

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.message_type != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.message_type

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.message != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.message

							);

						}

						sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);

						if (row_talendStats_STATS.duration != null) {

							sb_talendStats_FILE.append(

							row_talendStats_STATS.duration

							);

						}

						sb_talendStats_FILE
								.append(OUT_DELIM_ROWSEP_talendStats_FILE);

						nb_line_talendStats_FILE++;

						outtalendStats_FILE.write(sb_talendStats_FILE
								.toString());

						tos_count_talendStats_FILE++;

						/**
						 * [talendStats_FILE main ] stop
						 */

						/**
						 * [talendStats_STATS end ] start
						 */

						currentComponent = "talendStats_STATS";

					}

					ok_Hash.put("talendStats_STATS", true);
					end_Hash.put("talendStats_STATS", System
							.currentTimeMillis());

					/**
					 * [talendStats_STATS end ] stop
					 */

					/**
					 * [talendStats_FILE end ] start
					 */

					currentComponent = "talendStats_FILE";

				} finally {
					if (outtalendStats_FILE != null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}
					globalMap.put("talendStats_FILE_NB_LINE",
							nb_line_talendStats_FILE);
					globalMap.put("talendStats_FILE_FILE_NAME",
							fileName_talendStats_FILE);
				} // finally

				ok_Hash.put("talendStats_FILE", true);
				end_Hash.put("talendStats_FILE", System.currentTimeMillis());

				/**
				 * [talendStats_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final DeleteMetadata_RT DeleteMetadata_RTClass = new DeleteMetadata_RT();

		int exitCode = DeleteMetadata_RTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = DeleteMetadata_RT.class
					.getClassLoader().getResourceAsStream(
							"anfog_dm/deletemetadata_rt_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.logDir = (String) context.getProperty("logDir");

			context.paramFile = (String) context.getProperty("paramFile");

			context.metadataDb_RT_Database = (String) context
					.getProperty("metadataDb_RT_Database");

			context.metadataDb_RT_Login = (String) context
					.getProperty("metadataDb_RT_Login");

			context.metadataDb_RT_Password = (java.lang.String) context
					.getProperty("metadataDb_RT_Password");

			context.metadataDb_RT_Port = (String) context
					.getProperty("metadataDb_RT_Port");

			context.metadataDb_RT_Schema = (String) context
					.getProperty("metadataDb_RT_Schema");

			context.metadataDb_RT_Server = (String) context
					.getProperty("metadataDb_RT_Server");

			context.exclude = (String) context.getProperty("exclude");

			try {
				context.fileId = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("fileId"));
			} catch (NumberFormatException e) {
				context.fileId = null;
			}

			context.include = (String) context.getProperty("include");

			context.sourceDir = (String) context.getProperty("sourceDir");

			context.url = (String) context.getProperty("url");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("logDir")) {
				context.logDir = (String) parentContextMap.get("logDir");
			}
			if (parentContextMap.containsKey("paramFile")) {
				context.paramFile = (String) parentContextMap.get("paramFile");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Database")) {
				context.metadataDb_RT_Database = (String) parentContextMap
						.get("metadataDb_RT_Database");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Login")) {
				context.metadataDb_RT_Login = (String) parentContextMap
						.get("metadataDb_RT_Login");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Password")) {
				context.metadataDb_RT_Password = (java.lang.String) parentContextMap
						.get("metadataDb_RT_Password");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Port")) {
				context.metadataDb_RT_Port = (String) parentContextMap
						.get("metadataDb_RT_Port");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Schema")) {
				context.metadataDb_RT_Schema = (String) parentContextMap
						.get("metadataDb_RT_Schema");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Server")) {
				context.metadataDb_RT_Server = (String) parentContextMap
						.get("metadataDb_RT_Server");
			}
			if (parentContextMap.containsKey("exclude")) {
				context.exclude = (String) parentContextMap.get("exclude");
			}
			if (parentContextMap.containsKey("fileId")) {
				context.fileId = (Long) parentContextMap.get("fileId");
			}
			if (parentContextMap.containsKey("include")) {
				context.include = (String) parentContextMap.get("include");
			}
			if (parentContextMap.containsKey("sourceDir")) {
				context.sourceDir = (String) parentContextMap.get("sourceDir");
			}
			if (parentContextMap.containsKey("url")) {
				context.url = (String) parentContextMap.get("url");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		talendStats_STATS.addMessage("begin");

		try {
			errorCode = null;
			Implicit_Context_DelimitedProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_Implicit_Context_Delimited) {

			e_Implicit_Context_Delimited.printStackTrace();
			globalMap.put("Implicit_Context_Delimited_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPreJob

		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {

			e_tPostgresqlConnection_1.printStackTrace();
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : DeleteMetadata_RT");
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 88471 characters generated by Talend Open Studio for Data Integration on the
 * January 15, 2014 1:09:03 PM EST
 ************************************************************************************************/
